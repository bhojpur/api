syntax = "proto3";

// Copyright (c) 2018 Bhojpur Consulting Private Limited, India. All rights reserved.

// Permission is hereby granted, free of charge, to any person obtaining a copy
// of this software and associated documentation files (the "Software"), to deal
// in the Software without restriction, including without limitation the rights
// to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
// copies of the Software, and to permit persons to whom the Software is
// furnished to do so, subject to the following conditions:

// The above copyright notice and this permission notice shall be included in
// all copies or substantial portions of the Software.

// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
// FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
// AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
// LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
// OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
// THE SOFTWARE.

package v1.runtime;

import "google/protobuf/empty.proto";
import "pkg/core/v1/common/common.proto";

option csharp_namespace = "api.AppCallback.Autogen.Grpc";
option java_outer_classname = "AppAppCallbackProtos";
option java_package = "net.bhojpur.api";
option go_package = "github.com/bhojpur/api/pkg/core/v1/runtime;runtime";

// AppCallback service allows user Bhojpur Application to interact with the
// Bhojpur Application runtime. The user Bhojpur Application needs to implement
// AppCallback service if it needs to receive message from runtime.
service AppCallback {
  // Invokes service method with InvokeRequest.
  rpc OnInvoke (v1.common.InvokeRequest) returns (v1.common.InvokeResponse) {}

  // Lists all topics subscribed by this Bhojpur Application.
  rpc ListTopicSubscriptions(google.protobuf.Empty) returns (ListTopicSubscriptionsResponse) {}

  // Subscribes events from PubSub
  rpc OnTopicEvent(TopicEventRequest) returns (TopicEventResponse) {}

  // Lists all input bindings subscribed by this Bhojpur Application.
  rpc ListInputBindings(google.protobuf.Empty) returns (ListInputBindingsResponse) {}

  // Listens events from the input bindings
  //
  // User Bhojpur Application can save the states or send the events to the output
  // bindings optionally by returning BindingEventResponse.
  rpc OnBindingEvent(BindingEventRequest) returns (BindingEventResponse) {}
}

// TopicEventRequest message is compatible with CloudEvent spec v1.0
message TopicEventRequest {
  // id identifies the event. Producers MUST ensure that source + id 
  // is unique for each distinct event. If a duplicate event is re-sent
  // (e.g. due to a network error) it MAY have the same id. 
  string id = 1;

  // source identifies the context in which an event happened.
  // Often this will include information such as the type of the
  // event source, the organization publishing the event or the process
  // that produced the event. The exact syntax and semantics behind
  // the data encoded in the URI is defined by the event producer.
  string source = 2;

  // The type of event related to the originating occurrence. 
  string type = 3;

  // The version of the CloudEvents specification. 
  string spec_version = 4;

  // The content type of data value.
  string data_content_type = 5;

  // The content of the event.
  bytes data = 7;

  // The pubsub topic which publisher sent to.
  string topic = 6;

  // The name of the pubsub the publisher sent to.
  string pubsub_name = 8;

  // The matching path from TopicSubscription/routes (if specified) for this event.
  // This value is used by OnTopicEvent to "switch" inside the handler.
  string path = 9;
}

// TopicEventResponse is response from app on published message
message TopicEventResponse {
  // TopicEventResponseStatus allows apps to have finer control over handling of the message.
  enum TopicEventResponseStatus {
    // SUCCESS is the default behavior: message is acknowledged and not retried or logged.
    SUCCESS = 0;
    // RETRY status signals Bhojpur Application to retry the message as part of an expected
    // scenario (no warning is logged).
    RETRY = 1;
    // DROP status signals Bhojpur Application to drop the message as part of an unexpected
    // scenario (warning is logged).
    DROP = 2;
  }

  // The list of output bindings.
  TopicEventResponseStatus status = 1;
}

// BindingEventRequest represents input bindings event.
message BindingEventRequest {
  // Required. The name of the input binding component.
  string name = 1;

  // Required. The payload that the input bindings sent
  bytes data = 2;

  // The metadata set by the input binging components.
  map<string,string> metadata = 3;
}

// BindingEventResponse includes operations to save state or send data to output bindings
// optionally.
message BindingEventResponse {
  // The name of state store where states are saved.
  string store_name = 1;

  // The state key values which will be stored in store_name.
  repeated v1.common.StateItem states = 2;

  // BindingEventConcurrency is the kind of concurrency 
  enum BindingEventConcurrency {
    // SEQUENTIAL sends data to output bindings specified in "to" sequentially.
    SEQUENTIAL = 0;
    // PARALLEL sends data to output bindings specified in "to" in parallel.
    PARALLEL = 1;
  }

  // The list of output bindings.
  repeated string to = 3;

  // The content which will be sent to "to" output bindings.
  bytes data = 4;

  // The concurrency of output bindings to send data to
  // "to" output bindings list. The default is SEQUENTIAL.
  BindingEventConcurrency concurrency = 5;
}

// ListTopicSubscriptionsResponse is the message including the list of the subscribing
// topics.
message ListTopicSubscriptionsResponse {
  // The list of topics.
  repeated TopicSubscription subscriptions = 1;
}

// TopicSubscription represents topic and metadata.
message TopicSubscription {
  // Required. The name of the pubsub containing the topic below to subscribe to.
  string pubsub_name = 1;

  // Required. The name of topic which will be subscribed
  string topic = 2;

  // The optional properties used for this topic's subscription e.g. session id
  map<string,string> metadata = 3;

  // The optional routing rules to match against. In the gRPC interface, OnTopicEvent
  // is still invoked but the matching path is sent in the TopicEventRequest.
  TopicRoutes routes = 5;
}

message TopicRoutes {
  // The list of rules for this topic.
  repeated TopicRule rules = 1;

  // The default path for this topic.
  string default = 2;
}

message TopicRule {
  // The optional CEL expression used to match the event.
	// If the match is not specified, then the route is considered the default.
  string match = 1;

  // The path used to identify matches for this subscription.
  // This value is passed in TopicEventRequest and used by OnTopicEvent to "switch"
  // inside the handler.
  string path = 2;
}

// ListInputBindingsResponse is the message including the list of input bindings.
message ListInputBindingsResponse {
  // The list of input bindings.
  repeated string bindings = 1;
}